name: test-bot

networks:
  app:

services:
  bot:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: bot
    environment:
      - SERVICE_TYPE=bot
    env_file:
      - bot/.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      app:

  admin_panel:
    build:
      context: .
      dockerfile: bot/Dockerfile
    container_name: admin_panel
    env_file:
      - bot/.env
    environment:
      - SERVICE_TYPE=admin_panel
    depends_on:
      bot:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8080:8000"
    networks:
      app:

  postgres:
    image: postgres:16
    container_name: postgres
    env_file:
      - pg_db.env
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      app:

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      app:

volumes:
    postgres:
